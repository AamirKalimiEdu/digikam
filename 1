/* ============================================================
 *
 * This file is a part of digiKam project
 * http://www.digikam.org
 *
 * Date        : 2005-04-21
 * Description : slide show tool using preview of pictures.
 *
 * Copyright (C) 2005-2011 by Dhruv Patel <dhruvkumarr dot patel51 at gmail dot com>
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General
 * Public License as published by the Free Software Foundation;
 * either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * ============================================================ */


// C++ includes

#include <stdio.h>

// Qt includes

#include <QtGui>
#include <QString>
#include <QtDeclarative/QDeclarativeView>
#include <QDeclarativeEngine>
#include <QGraphicsObject>
#include<QDeclarativeContext>

#include"qmlShow.h"
#include"imageinfo.h"
#include"imageinfolist.h"
#include"metadatahub.h"

namespace Digikam
{

class QmlShow::QmlShowPriv
{
public:

    QmlShowPriv()
        : ui(0),
          imageno(0)
          imageno(0),
		  editBox(0)

    {
    }

    QDeclarativeView *ui;
    int imageno;
    QStringList list;
};

QmlShow::QmlShow(const QStringList& list)
	QDeclarativeView *editBox;
    int imageno;
    ImageInfoList list;
};

QmlShow::QmlShow(const ImageInfoList& list)

    : QMainWindow(0, Qt::FramelessWindowHint),
      d(new QmlShowPriv)
{
    d->ui   = new QDeclarativeView;
    d->list = list;
    QDeclarativeContext *ctxt = d->ui->rootContext();

    ctxt->setContextProperty("myModel", QVariant::fromValue(d->list));

	QStringList nameslist;
	foreach (const ImageInfo& info, list)
    {
        nameslist << info.filePath();
    }
    ctxt->setContextProperty("myModel", QVariant::fromValue(nameslist));


    // FIXME: Use KStandardDirs and install qml file properly (see data/database/dbconfig.xml as example)
    d->ui->setSource(QUrl::fromLocalFile("../core/utilities/qmlShow/qmlview/qmlview.qml"));
    setCentralWidget(d->ui);

    connect(d->ui->engine(), SIGNAL(quit()),
            this, SLOT(close()));

    d->ui->setResizeMode(QDeclarativeView::SizeRootObjectToView);

    QObject *object=d->ui->rootObject();
    connect(object, SIGNAL(nextClicked()),
            this, SLOT(nextImage()));
    connect(object, SIGNAL(prevClicked()),
            this, SLOT(prevImage()));
    connect(object, SIGNAL(play()),
            this, SLOT(play()));
    connect(object, SIGNAL(pause()),
            this, SLOT(pause()));
    connect(object,SIGNAL(gridChanged(int)),this,SLOT(gridChanged(int)));

	connect(object,SIGNAL(loadMetaData()),this,SLOT(setMetaData()));

    d->imageno=0;

    d->ui->show();
    showMaximized();

    if(!d->list.isEmpty())
    {

        object->setProperty("text", d->list[1]);

		int rect_height=object->property("height");
		int rect_width=object->property("width");
		int h_ratio=rect_height/d->list[0].dimensions().height();
		int w_ratio=rect_width/d->list[0].dimensions().width();
		if(h_ratio<w_ratio)
		{
			object->setProperty("src_height",rect_height);
			object->setProperty("src_width",h_ratio*(rect_width/w_ratio));
		}
		else
		{
			object->setProperty("src_height",w_ratio*(rect_height/h_ratio));
			object->setProperty("src_width",rect_width);
		}
        object->setProperty("text", d->list[0].filePath());

    }
    else
    {
        close();
    }
}

QmlShow::~QmlShow()
{
    delete d;
}

void QmlShow::nextImage()
{
    if (d->imageno == (d->list.count()-1))
    {
        return;
    }

    QObject* object = d->ui->rootObject();

    object->setProperty("text", d->list[++(d->imageno)]);
    object->setProperty("text", d->list[++(d->imageno)].filePath());
	setMetaData();

}

void QmlShow::prevImage()
{
    if (d->imageno == 0)
    {
        return;
    }

    QObject* object = d->ui->rootObject();

    object->setProperty("text", d->list[--(d->imageno)]);
    object->setProperty("text", d->list[--(d->imageno)].filePath());
	setMetaData();

}

void QmlShow::play()
{
    QObject* object = d->ui->rootObject();
    object->setProperty("bool_pp", true);
}

void QmlShow::pause()
{
    QObject* object = d->ui->rootObject();
    object->setProperty("bool_pp", false);
}

void QmlShow::gridChanged(int index)
{
	QObject* object = d->ui->rootObject();
	object->setProperty("text", d->list[index]);
	d->imageno=index;
}

object->setProperty("text", d->list[index].filePath());
	d->imageno=index;
	setMetaData();
}

void QmlShow::setMetaData()
{
	MetadataHubOnTheRoad hub;
	hub= MetadataHub();
	hub.load(d->list.at(d->imageno));
	QObject* object = d->ui->rootObject();
	QObject *editBox;
	foreach(editBox,object->children())
	{
		if(editBox->objectName().compare("editbox")==0) break;
	}
	editBox->setProperty("name",d->list.at(d->imageno).name());
	editBox->setProperty("data_time",d->list.at(d->imageno).dateTime().toString("dd.MM.yyyy"));
	editBox->setProperty("pick_label",hub.pickLabel());
	editBox->setProperty("color_label",hub.colorLabel());
	editBox->setProperty("rating",hub.rating());
/*	QObject* editBox = d->ui->findChild<QObject *>("editbox");
	QMessageBox* msg=new QMessageBox(0);
	if(editBox==NULL) msg->setText("Screw you!");
	else msg->setText(d->list.at(d->imageno).name());
	msg->show();*/
/*	QObject* object = d->ui->rootObject();
	QObject* editBox = d->ui->findChild<QObject *>("editbox");
	editBox->setProperty("name",d->list.at(d->imageno).name());*/
/*	d->editBox = new QDeclarativeView;
	d->editBox->setSource(QUrl::fromLocalFile("../core/utilities/qmlShow/qmlview/editbox.qml"));
	QObject *object = d->editBox->rootObject();
	object->setProperty("name","Hello world");
	int height = QApplication::desktop()->height();
	int width = QApplication::desktop()->width();
	object->setProperty("x",width/4);
	object->setProperty("y",height/4);
	d->editBox->show();*/
}


}
